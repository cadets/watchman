# vim:syntax=python

import lit
import os
import sys


#
# Basic information about this test suite.
#
config.name = 'WATCHMAN'
config.suffixes = [ '.c', '.cpp', '.ll' ]
config.excludes = [ 'Inputs' ]
config.test_format = lit.formats.ShTest()

params = lit_config.params

#
# Useful environment variables.
#
# This variables are optional when WATCHMAN is installed to a standard location;
# if not, failure to set these variables will cause tests to fail building.
#
source_dir = os.getenv('WATCHMAN_SOURCE_DIR')
if not source_dir:
	if not 'source_dir' in params:
		raise Exception, ('Unable to find WATCHMAN source directory;' +
			' set WATCHMAN_SOURCE_DIR or pass --source_dir to lit')

	source_dir = params['source_dir']

build_dir = os.getenv('WATCHMAN_BUILD_DIR')
if not build_dir:
	if not 'build_dir' in params:
		raise Exception, ('Unable to find WATCHMAN build directory;' +
			' set WATCHMAN_BUILD_DIR or pass --build_dir to lit')

	build_dir = params['build_dir']


include_dirs = [ build_dir + '/include' ]
extra_cflags = [ '-g' ]     # always build tests with debug symbols
extra_cxxflags = [ '-g' ]
libdirs = []
extra_libs = []



if 'extra_include_dirs' in params:
	include_dirs += params['extra_include_dirs'].split(os.path.pathsep)

if 'extra_cflags' in params:
	extra_cflags += params['extra_cflags'].split(os.path.pathsep)

if 'extra_cxxflags' in params:
	extra_cxxflags += params['extra_cxxflags'].split(os.path.pathsep)

if 'extra_libdirs' in params:
	libdirs += params['extra_libdirs'].split(os.path.pathsep)

if 'extra_libs' in params:
	extra_libs += params['extra_libs'].split(os.path.pathsep)


if 'output_dir' in params:
	config.test_exec_root = params['output_dir']


#
# Find the 'test_support' module (which may not be in the current PYTHONPATH).
#
sys.path.append(os.curdir)
if source_dir: sys.path.append(os.path.join(source_dir, 'scripts'))

try:
	import test_support as test

except ImportError, e:
	print "Unable to find 'test_support' module!"
	print "Try setting WATCHMAN_SOURCE_DIR?"
	sys.exit(1)


#
# Find LLVM tools (e.g. FileCheck).
#
llvm_obj_root = test.llvm_config['obj-root']
llvm_tools = os.path.join(llvm_obj_root, 'bin')


#
# Find WATCHMAN includes and libraries.
#
for (header, subdir) in [
		('libwatchman.h', 'include'),
		('watchman_internal.h', 'lib'),
	]:

	include_dirs.append(
		test.find_include_dir(header, [ '%s/%s' % (source_dir, subdir) ],
			'Try setting WATCHMAN_SOURCE_DIR'))

library_dir = test.find_libdir('libwatchman.*',
	[ '%s/lib' % d for d in [ os.getcwd(), build_dir ] ],
	'Try setting WATCHMAN_BUILD_DIR')

libdirs.append(library_dir)


#
# Set tools paths, CFLAGS, LDFLAGS, PATH, etc.
#
clang = test.which([ 'clang33', 'clang' ])
clangpp = test.which([ 'clang++33', 'clang++' ])
llc = test.which([ 'llc33', 'llc' ])

config.substitutions += [
	# Tools:
	('%clang', clang),
	('%llc', llc),
	('%filecheck', test.which([ 'FileCheck33', 'FileCheck' ])),

	# Flags:
	('%cflags', test.cflags(include_dirs + [ '%p/Inputs' ],
	                        extra = extra_cflags)),
	('%cxxflags', test.cflags(include_dirs + [ '%p/Inputs' ],
	                          extra = extra_cxxflags)),
	('%ldflags', test.ldflags(libdirs, [ 'watchman' ], extra_libs)),
	('%cpp_out', test.cpp_out()),
]

config.environment['PATH'] = os.path.pathsep.join([
	llvm_tools,
	os.path.join(source_dir, 'scripts'),
	config.environment['PATH']
])

config.environment['LD_LIBRARY_PATH'] = library_dir
config.environment['WATCHMAN_BUILD_DIR'] = build_dir
config.environment['WATCHMAN_SOURCE_DIR'] = source_dir
config.environment['WATCHMAN_DEBUG'] = '*'
config.environment['CC'] = clang
config.environment['CXX'] = clangpp
config.environment['LLC'] = llc
